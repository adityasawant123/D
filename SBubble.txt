#include <iostream>
#include <omp.h>
using namespace std;

void swap(int &a, int &b) {
	int temp = a;
	a = b;
	b = temp;
}

// Sequential Bubble Sort
void bubble_sequential(int a[], int n) {
	for (int i = 0; i < n - 1; i++) {
		for (int j = 1; j < n - i; j++) {
			if (a[j] < a[j - 1]) {
				swap(a[j], a[j - 1]);
			}
		}
	}
}

// Parallel Bubble Sort (Odd-Even Sort)
void bubble_parallel(int a[], int n) {
	for (int i = 0; i < n; i++) {
		int start = i % 2;
		#pragma omp parallel for
		for (int j = start; j < n - 1; j += 2) {
			if (a[j] > a[j + 1]) {
				swap(a[j], a[j + 1]);
			}
		}
	}
}

int main() {
	int n;
	cout << "Enter how many elements you want: ";
	cin >> n;

	int *a1 = new int[n];
	int *a2 = new int[n];

	cout << "Enter array elements: ";
	for (int i = 0; i < n; i++) {
		cin >> a1[i];
		a2[i] = a1[i]; // Copy for parallel sort
	}

	// Sequential Sort and Time
	double start_seq = omp_get_wtime();
	bubble_sequential(a1, n);
	double end_seq = omp_get_wtime();

	cout << "Sorted array (Sequential): ";
	for (int i = 0; i < n; i++) {
		cout << a1[i] << " ";
	}
	cout << "\nSequential Time: " << (end_seq - start_seq) << " sec\n";

	// Parallel Sort and Time
	double start_par = omp_get_wtime();
	bubble_parallel(a2, n);
	double end_par = omp_get_wtime();

	cout << "Sorted array (Parallel): ";
	for (int i = 0; i < n; i++) {
		cout << a2[i] << " ";
	}
	cout << "\nParallel Time: " << (end_par - start_par) << " sec\n";

	delete[] a1;
	delete[] a2;

	return 0;
}