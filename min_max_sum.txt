#include <iostream>
#include <omp.h>
#include <climits>
using namespace std;

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int* arr = new int[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) cin >> arr[i];

    int min_val, max_val, sum;
    double start, end;

    // ------------------------
    // Sequential Execution
    // ------------------------
    min_val = INT_MAX;
    max_val = INT_MIN;
    sum = 0;
    start = omp_get_wtime();
    for (int i = 0; i < n; i++) {
        if (arr[i] < min_val) min_val = arr[i];
        if (arr[i] > max_val) max_val = arr[i];
        sum += arr[i];
    }
    end = omp_get_wtime();
    cout << "\nSequential Results:";
    cout << "\nMinimum: " << min_val;
    cout << "\nMaximum: " << max_val;
    cout << "\nSum: " << sum;
    cout << "\nAverage: " << (double)sum / n;
    cout << "\nSequential Time: " << (end - start) << " seconds";

    // ------------------------
    // Parallel Execution
    // ------------------------
    min_val = INT_MAX;
    max_val = INT_MIN;
    sum = 0;
    start = omp_get_wtime();
    #pragma omp parallel for reduction(min: min_val) reduction(max: max_val) reduction(+: sum)
    for (int i = 0; i < n; i++) {
        if (arr[i] < min_val) min_val = arr[i];
        if (arr[i] > max_val) max_val = arr[i];
        sum += arr[i];
    }
    end = omp_get_wtime();
    cout << "\n\nParallel Results:";
    cout << "\nMinimum: " << min_val;
    cout << "\nMaximum: " << max_val;
    cout << "\nSum: " << sum;
    cout << "\nAverage: " << (double)sum / n;
    cout << "\nParallel Time: " << (end - start) << " seconds\n";

    delete[] arr;
    return 0;
}
