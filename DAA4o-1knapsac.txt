import java.util.Scanner;
public class daa {

    public static int knapsackDynamicProgramming(int[] weights, int[] values, int capacity) {
        int n = values.length;
        // Create a 2D DP table with dimensions (n+1) x (capacity+1)
        int[][] dp = new int[n + 1][capacity + 1];

        // Build the table dp[][] in a bottom-up manner
        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= capacity; w++) {
                if (weights[i - 1] <= w) {
                    // max of (including the item or excluding it)
                    dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
                } else {
                    // If the weight of the item is more than capacity, exclude it
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        // The maximum value that can be obtained is in dp[n][capacity]
        return dp[n][capacity];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input number of items
        System.out.print("Enter the number of items: ");
        int n = scanner.nextInt();

        // Input weights and values
        int[] weights = new int[n];
        int[] values = new int[n];

        System.out.println("Enter the weights of the items:");
        for (int i = 0; i < n; i++) {
            System.out.print("Weight of item " + (i + 1) + ": ");
            weights[i] = scanner.nextInt();
        }

        System.out.println("Enter the values of the items:");
        for (int i = 0; i < n; i++) {
            System.out.print("Value of item " + (i + 1) + ": ");
            values[i] = scanner.nextInt();
        }

        // Input knapsack capacity
        System.out.print("Enter the capacity of the knapsack: ");
        int capacity = scanner.nextInt();

        // Calculate the maximum value
        int maxValue = knapsackDynamicProgramming(weights, values, capacity);
        System.out.println("Maximum value in Knapsack = " + maxValue);

        scanner.close();
    }
}