*import java.util.*;
class HuffmanNode {
    char ch;
    int frequency;
    HuffmanNode left, right;

    // Constructor
    HuffmanNode(char ch, int frequency) {
        this.ch = ch;
        this.frequency = frequency;
        this.left = this.right = null;
    }
}

// Comparator for the priority queue (min-heap)
class HuffmanComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y) {
        return x.frequency - y.frequency;
    }
}

public class daa {

    // Generate Huffman Codes and print them
    public static void generateCodes(HuffmanNode root, String code, Map<Character, String> huffmanCodes) {
        if (root == null) return;

        // If leaf node, it contains a character
        if (root.left == null && root.right == null) {
            huffmanCodes.put(root.ch, code);
            System.out.println(root.ch + " : " + code);
        }

        // Traverse left and right with appended '0' and '1'
        generateCodes(root.left, code + "0", huffmanCodes);
        generateCodes(root.right, code + "1", huffmanCodes);
    }

    // Main function to build the Huffman Tree
    public static HuffmanNode buildHuffmanTree(Map<Character, Integer> frequencyMap) {
        PriorityQueue<HuffmanNode> pq = new PriorityQueue<>(new HuffmanComparator());

        // Create leaf nodes for each character and add to the priority queue
        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {
            pq.add(new HuffmanNode(entry.getKey(), entry.getValue()));
        }

        // Iterate until there is only one node left (the root)
        while (pq.size() > 1) {
            // Remove the two nodes with the lowest frequency
            HuffmanNode left = pq.poll();
            HuffmanNode right = pq.poll();

            // Create a new internal node with these two nodes as children
            int sum = left.frequency + right.frequency;
            HuffmanNode newNode = new HuffmanNode('-', sum);
            newNode.left = left;
            newNode.right = right;

            // Add the new node to the priority queue
            pq.add(newNode);
        }

        // The remaining node is the root of the Huffman Tree
        return pq.poll();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Take input from the user
        System.out.print("Enter the text to encode: ");
        String text = scanner.nextLine();

        // Frequency map of characters
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char ch : text.toCharArray()) {
            frequencyMap.put(ch, frequencyMap.getOrDefault(ch, 0) + 1);
        }

        // Build Huffman Tree
        HuffmanNode root = buildHuffmanTree(frequencyMap);

        // Generate and print Huffman Codes
        System.out.println("Huffman Codes for characters:");
        Map<Character, String> huffmanCodes = new HashMap<>();
        generateCodes(root, "", huffmanCodes);

        // Encode the input text
        StringBuilder encodedText = new StringBuilder();
        for (char ch : text.toCharArray()) {
            encodedText.append(huffmanCodes.get(ch));
        }

        System.out.println("\nEncoded Text: " + encodedText.toString());
        scanner.close();
    }
}